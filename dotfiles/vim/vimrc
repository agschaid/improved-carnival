
let mapleader = ','
let maplocalleader = ','

" always move in wrapped lines
noremap <silent> k gk
noremap <silent> j gj

imap <A-f> (╯°□°)╯︵ ┻━┻
imap <A-s> ¯\_(ツ)_/¯
imap <A-d> (⌐■_■)
imap <A-y> ┌П┐(ಠ_ಠ)
imap <A-l> L(° O °L)

" navigation in split windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" incremental search
set incsearch

" incremental search and replace
set inccommand=split
nmap <leader><leader>r :%s//\0/g<Left><Left><Left><Left><Left>a<BS>
xmap <leader><leader>r y:%s/<C-R>"/\0/g<Left><Left>a<BS>

" clear search highlight
nmap <leader><leader><leader> :noh<CR>

" buffers are hidden and not unloaded  -> switch between buffers without save
set hidden

" Don't write backups. Some language servers have issues with backup files, see coc #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience. Needed by coc
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
" Needed by coc.
set shortmess+=c

" easier copy
vnoremap <leader>c "+y<CR>


set ignorecase
set smartcase
set number
set background=dark
set mouse=a

set tabstop=2
set shiftwidth=2
set expandtab

" make comments look pretty with Victor Mono
highlight Comment cterm=italic gui=italic

" show tabs and trailing whitespace. Use some less pronounced solarized color
set list
set listchars=tab:▸\ ,trail:·
:hi BadWhitespace ctermfg=240 " Solarized Base01
:match BadWhitespace / \+$/
:2match BadWhitespace /\t/

"""""""""""""""""""""""""""""""""""""""
" Not quite sure why I don't need those solarized values anymore.
" But after update to nixos 22.11 this broke vim
"""""""""""""""""""""""""""""""""""""""
" general values for solarized plugin 
" let g:solarized_termtrans = 1
" set background=dark " not sure why but this should always be dark 
" colorscheme solarized
"""""""""""""""""""""""""""""""""""""""


""" VALUES FOR SOLARIZED BRIGHT
" let g:limelight_conceal_ctermfg = 245  " Solarized Base1
" let g:limelight_conceal_guifg = '#8a8a8a'  " Solarized Base1

""" VALUES FOR SOLARIZED DARK
let g:limelight_conceal_ctermfg = 240  " Solarized Base01
let g:limelight_conceal_guifg = '#585858'  " Solarized Base01

" nnoremap <silent> MM :call LanguageClient_contextMenu()<CR>
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>

" NERDTREE CONFIG
" Not quite sure why this needs the 'function!' which (if I understand
" correctly) replaces a previous function definition . . . but there is no
" prefious definition.
function! BetterNerdTreeToggle()
    if &filetype == 'nerdtree' || exists("g:NERDTree") && g:NERDTree.IsOpen()
        :NERDTreeToggle
    elseif filereadable(expand('%'))
        NERDTreeFind
    else
        :NERDTree
    endif
endfunction
nnoremap <silent>TT :call BetterNerdTreeToggle()<CR>

" show dot files by default
let NERDTreeShowHidden=1
:hi Directory ctermfg=4  " fix directory coloring of NerdTree

" GOYO CONFIG
" by default start in programming linebreak width
let g:goyo_width = 120

" GOYO QUIT: START
" taken from https://github.com/junegunn/goyo.vim/wiki/Customization
" When Goyo is open :q usually just quits Goyo. Not vim. The code below changes this behavior.
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()
" GOYO QUIT: END

" CTRL-P CONFIG
let g:ctrlp_custom_ignore = '\v[\/](target|dist|jdt.ls-java-project)|(\.(swp|ico|git|svn))$'
" disable working path mode and limit ctrl+p to the current working directory
" https://stackoverflow.com/questions/29399349/cant-get-ctrlp-to-set-working-dir-as-root-folder
let g:ctrlp_working_path_mode = ''


"""""""
" FZF "
"""""""

" make :Ag not search in the filename.
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)

"""""""
" COC "
"""""""

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <C-A-p> <Plug>(coc-diagnostic-prev)
nmap <silent> <C-A-j> <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.3 or vim >= 8.2.0750
"
" enable when a newer coc version has arrived
"
"nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
"nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
"inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction(\'runCommand\', \'editor.action.organizeImport\')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,\'coc_current_function\',\'\')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
